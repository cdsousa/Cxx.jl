BASE_JULIA_BIN = get(ENV, "BASE_JULIA_BIN", Sys.BINDIR)
BASE_JULIA_SRC = get(ENV, "BASE_JULIA_SRC", joinpath(BASE_JULIA_BIN, "..", ".."))
println("writing path.jl file")
s = """
    const BASE_JULIA_BIN=$(sprint(show, BASE_JULIA_BIN))
    export BASE_JULIA_BIN
    const BASE_JULIA_SRC=$(sprint(show, BASE_JULIA_SRC))
    export BASE_JULIA_SRC
    """
f = open(joinpath(dirname(@__FILE__),"path.jl"), "w")
write(f, s)
close(f)


######


using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, @__DIR__))
products = [
    LibraryProduct(prefix, String["libLLVM"], :libLLVM),
    LibraryProduct(prefix, String["libLTO"], :libLTO),
    LibraryProduct(prefix, String["libclang"], :libclang),
    # ExecutableProduct(prefix, "llvm-config", :llvm_config),
    FileProduct(prefix, "tools/llvm-config", :llvm_config),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/Gnimuc/LLVMBuilder/releases/download/0.0.0-2/"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:x86_64, :glibc) => ("$bin_prefix/libcxxffi.v0.0.0.x86_64-linux-gnu.tar.gz", "ae89438a05f4748f8b7ea20609c638055e46ca125a843fa29eba7b027ccd4ed3"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
